grammar transpiler;

g: (INT_NUM|FLOAT_NUM|CONSLIT|ID|CONSLIT|ONE_LINE_COMMENT|MULTILINE_COMMENT|FUNCTION|BEGIN|END|INT|FLOAT|CONSTINT|CONSTFLOAT
|OPEN_BRACKET|CLOSE_BRACKET|OPEN_PAREN|CLOSE_PAREN|SEMICOLON|COLON|COMMA|WALRUS|PROCEDURE|PLUS|MINUS|TIMES|SLASH|
AT|HASH|CARET|MOD|DIV|EQUAL|NOT_EQUAL|LESS_THAN|LESS_OR_EQUAL|GREATER_OR_EQUAL|GREATER_THAN|AND|OR|NOT_EQUAL|IN)*;

fragment IDENTIFIER_START: [a-zA-Z];
fragment IDENTIFIER_PART: [a-zA-Z_0-9];


// KEYWORDS
FUNCTION: 'FUNCTION' | 'function';
BEGIN: 'BEGIN' | 'begin';
END: 'END' | 'end';
PROCEDURE: 'PROCEDURE' | 'procedure';

// TYPES
INT: 'INTEGER' | 'integer';
FLOAT: 'REAL' | 'real';
CONSTINT: 'CONSTINT' | 'constint';
CONSTFLOAT: 'CONSTREAL' | 'constreal';

// CHARACTERS

OPEN_PAREN: '(';
CLOSE_PAREN: ')';
OPEN_BRACKET: '[';
CLOSE_BRACKET: ']';
SEMICOLON: ';';
COLON: ':';
COMMA: ',';
WALRUS: ':='; // ASSIGN
PLUS: '+';
MINUS: '-';
TIMES: '*';
SLASH: '/';
AT: '@';
HASH: '#';
CARET: '^';
MOD: 'mod';
DIV: 'div';
EQUAL: '=';
NOT_EQUAL: '<>';
LESS_THAN: '<';
GREATER_THAN: '>';
LESS_OR_EQUAL: '<=';
GREATER_OR_EQUAL: '>=';
AND: 'and';
OR: 'or';
NOT: 'not';
IN: 'in';



// - LITERALS 
WHITE_SPACE: [ \t\r\n]+ -> skip;

// - ID
ID: IDENTIFIER_START IDENTIFIER_PART*;

// - NUMBERS
fragment NUM: [0-9]+;
INT_NUM: [-+]? NUM;
FLOAT_NUM: [-+]? (NUM ('.' NUM)?) ([eE] [-+]?NUM)?; // TIENE QUE HABER CIFRAS A LA IZQDA DEL PUNTO

fragment WORD:[a-zA-Z]+;
CONSLIT: '\'' (WORD|'\\\''|~['])+ '\'';
// - STRINGS 
// STRING_LITERAL: '"' ~["]* '"'; // NO SE USAN STRINGS (CREEMOS)



// - COMMENTS 
ONE_LINE_COMMENT : '{' ~('}')* '}';
MULTILINE_COMMENT : '(*' .*? '*)';
